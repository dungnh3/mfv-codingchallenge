// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/dungnh3/mfv-codingchallenge/internal/models"
	mock "github.com/stretchr/testify/mock"

	repositories "github.com/dungnh3/mfv-codingchallenge/internal/repositories"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, accountId
func (_m *Repository) GetAccount(ctx context.Context, accountId int64) (*models.UserAccount, error) {
	ret := _m.Called(ctx, accountId)

	var r0 *models.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.UserAccount, error)); ok {
		return rf(ctx, accountId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.UserAccount); ok {
		r0 = rf(ctx, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *Repository) GetUser(ctx context.Context, userId int64) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, userId
func (_m *Repository) ListAccounts(ctx context.Context, userId int64) ([]*models.UserAccount, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*models.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.UserAccount, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.UserAccount); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Repository) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: txFunc
func (_m *Repository) Transaction(txFunc func(repositories.Repository) error) error {
	ret := _m.Called(txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(repositories.Repository) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUser provides a mock function with given fields: ctx, user
func (_m *Repository) UpsertUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUserAccount provides a mock function with given fields: ctx, userAccount
func (_m *Repository) UpsertUserAccount(ctx context.Context, userAccount *models.UserAccount) error {
	ret := _m.Called(ctx, userAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserAccount) error); ok {
		r0 = rf(ctx, userAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
